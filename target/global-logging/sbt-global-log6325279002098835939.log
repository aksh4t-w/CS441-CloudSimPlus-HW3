[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\aksha\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\aksha\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.3 (Oracle Corporation Java 18.0.2.1)
[debug]       Load.loadUnit: plugins took 65.7867ms
[debug]       Load.loadUnit: defsScala took 0.2525ms
[debug] [Loading] Scanning directory C:\Users\aksha\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\aksha\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 10.2818 ms
[debug]           Load.resolveProject(global-plugins) took 31.8963ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\aksha\.sbt\1.0\plugins, plugins: List(<none>))) took 53.5847ms
[debug] [Loading] Done in C:\Users\aksha\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 72.8672ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2484ms
[debug]     Load.loadUnit(file:/C:/Users/aksha/.sbt/1.0/plugins/, ...) took 146.38ms
[debug]   Load.apply: load took 259.5657ms
[debug]   Load.apply: resolveProjects took 3.6694ms
[debug]   Load.apply: finalTransforms took 40.3062ms
[debug]   Load.apply: config.delegates took 4.4048ms
[debug]   Load.apply: Def.make(settings)... took 216.9959ms
[debug]   Load.apply: structureIndex took 49.8386ms
[debug]   Load.apply: mkStreams took 0.8218ms
[info] loading global plugins from C:\Users\aksha\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2232.5106ms
[debug]           Load.loadUnit: plugins took 10.5666ms
[debug]           Load.loadUnit: defsScala took 0.0021ms
[debug] [Loading] Scanning directory C:\Users\aksha\Desktop\UIC\CS 441\Projects\HW3\CS441-CloudSimPlus-HW3\project
[debug]             Load.loadUnit: mkEval took 3.4405ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\aksha\Desktop\UIC\CS 441\Projects\HW3\CS441-CloudSimPlus-HW3\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 0.8238 ms
[info] loading settings for project cs441-cloudsimplus-hw3-build from idea.sbt ...
[debug]               Load.resolveProject(cs441-cloudsimplus-hw3-build) took 4.3541ms
[debug]             Load.loadTransitive: finalizeProject(Project(id cs441-cloudsimplus-hw3-build, base: C:\Users\aksha\Desktop\UIC\CS 441\Projects\HW3\CS441-CloudSimPlus-HW3\project, plugins: List(<none>))) took 5.4546ms
[debug] [Loading] Done in C:\Users\aksha\Desktop\UIC\CS 441\Projects\HW3\CS441-CloudSimPlus-HW3\project, returning: (cs441-cloudsimplus-hw3-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 68.7602ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.0179ms
[debug]         Load.loadUnit(file:/C:/Users/aksha/Desktop/UIC/CS%20441/Projects/HW3/CS441-CloudSimPlus-HW3/project/, ...) took 82.9129ms
[debug]       Load.apply: load took 83.8871ms
[debug]       Load.apply: resolveProjects took 0.0707ms
[debug]       Load.apply: finalTransforms took 5.8226ms
[debug]       Load.apply: config.delegates took 0.1744ms
[debug]       Load.apply: Def.make(settings)... took 37.9204ms
[debug]       Load.apply: structureIndex took 15.7423ms
[debug]       Load.apply: mkStreams took 0.0014ms
[info] loading project definition from C:\Users\aksha\Desktop\UIC\CS 441\Projects\HW3\CS441-CloudSimPlus-HW3\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 446.1931ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\aksha\Desktop\UIC\CS 441\Projects\HW3\CS441-CloudSimPlus-HW3
[debug]       Load.loadUnit: mkEval took 0.153ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 0.9432 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 17.4638ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\aksha\Desktop\UIC\CS 441\Projects\HW3\CS441-CloudSimPlus-HW3, plugins: List(<none>))) took 19.1931ms
[debug] [Loading] Done in C:\Users\aksha\Desktop\UIC\CS 441\Projects\HW3\CS441-CloudSimPlus-HW3, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 60.3959ms
[debug]     Load.loadUnit: cleanEvalClasses took 6.1109ms
[debug]   Load.loadUnit(file:/C:/Users/aksha/Desktop/UIC/CS%20441/Projects/HW3/CS441-CloudSimPlus-HW3/, ...) took 513.2994ms
[debug] Load.apply: load took 514.4155ms
[debug] Load.apply: resolveProjects took 0.1179ms
[debug] Load.apply: finalTransforms took 15.5097ms
[debug] Load.apply: config.delegates took 0.1598ms
[debug] Load.apply: Def.make(settings)... took 33.6427ms
[debug] Load.apply: structureIndex took 14.4515ms
[debug] Load.apply: mkStreams took 0.0015ms
[info] set current project to CS441-CloudSimPlus-HW3 (in build file:/C:/Users/aksha/Desktop/UIC/CS%20441/Projects/HW3/CS441-CloudSimPlus-HW3/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52582 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52582, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to CS441-CloudSimPlus-HW3 (in build file:/C:/Users/aksha/Desktop/UIC/CS%20441/Projects/HW3/CS441-CloudSimPlus-HW3/)
[debug] > Exec(idea-shell, None, None)
